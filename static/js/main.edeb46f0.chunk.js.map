{"version":3,"sources":["reducer.js","store.js","counter.js","App.js","serviceWorker.js","index.js"],"names":["initialState","count","reducer","state","action","type","store","createStore","applyMiddleware","next","result","console","log","connect","props","className","onClick","dispatch","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kPAAMA,EAAe,CACjBC,MAAO,GA+BIC,EA5BC,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAE9C,OAAQA,EAAOC,MAEX,IAAK,YACD,MAAO,CACHJ,MAAOE,EAAMF,MAAQ,GAG7B,IAAK,YACD,MAAO,CACHA,MAAQE,EAAMF,MAAQ,EAAKE,EAAMF,MAAQ,EAAI,GAIrD,IAAK,QACD,MAAO,CACHA,MAAO,GAGf,QACI,OAAOE,ICXJG,EAFDC,YAAYL,EAASM,aARpB,SAAAF,GAAK,OAAI,SAAAG,GAAI,OAAI,SAAAL,GAE5B,IAAIM,EAASD,EAAKL,GAElB,OADAO,QAAQC,IAAIF,GACLA,QCmCIG,G,YAAAA,aATS,SAAAV,GACpB,MAAO,CACHF,MAAOE,EAAMF,SAONY,EAtCC,SAACC,GAkBb,OAAQ,yBAAKC,UAAU,iCAEnB,uCACA,4BAAQV,KAAK,SAASU,UAAU,kBAAkBC,QAAS,WAjB3DF,EAAMG,SAAS,CAAEZ,KAAM,gBAiBvB,KACA,4BAAQA,KAAK,SAASU,UAAU,iBAAiBC,QAAS,WAd1DF,EAAMG,SAAS,CAAEZ,KAAM,gBAcvB,KACA,8BAAOS,EAAMb,OACb,4BAAQc,UAAU,kBAAkBV,KAAK,QAAQa,MAAM,QAAQF,QAAS,WAZxEF,EAAMG,SAAS,CAAEZ,KAAM,YAYvB,cCbOc,MAVf,WACE,OACE,kBAAC,IAAD,CAAUb,MAAOA,GACf,6BACE,kBAAC,EAAD,SCRYc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCFNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.edeb46f0.chunk.js","sourcesContent":["const initialState = {\r\n    count: 0\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case \"INCREMENT\":\r\n            return {\r\n                count: state.count + 1\r\n            };\r\n\r\n        case \"DECREMENT\":\r\n            return {\r\n                count: (state.count > 0) ? state.count - 1 : 0\r\n            };\r\n\r\n\r\n        case \"RESET\":\r\n            return {\r\n                count: 0\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n\r\n};\r\n\r\nexport default reducer;","import { createStore, applyMiddleware } from 'redux'\r\nimport reducer from './reducer'\r\n\r\n\r\nconst logger = store => next => action => {\r\n\r\n    let result = next(action)\r\n    console.log(result)\r\n    return result\r\n}\r\n\r\n\r\nconst store = createStore(reducer, applyMiddleware(logger))\r\n\r\nexport default store;","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\n\r\nconst Counter = (props) => {\r\n\r\n\r\n    const increment = () => {\r\n        props.dispatch({ type: \"INCREMENT\" })\r\n    };\r\n\r\n    const decrement = () => {\r\n        props.dispatch({ type: \"DECREMENT\" })\r\n    };\r\n\r\n    const reset = () => {\r\n        props.dispatch({ type: \"RESET\" })\r\n    };\r\n\r\n\r\n\r\n\r\n    return (<div className=\"d-flex justify-content-center\">\r\n\r\n        <h1>Counter</h1>\r\n        <button type=\"button\" className=\"btn btn-success\" onClick={() => increment()}>+</button>\r\n        <button type=\"button\" className=\"btn btn-danger\" onClick={() => decrement()}>-</button>\r\n        <span>{props.count}</span>\r\n        <button className=\"btn btn-primary\" type=\"reset\" value=\"Reset\" onClick={() => reset()} >Reset</button>\r\n    </div>);\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        count: state.count\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(Counter);","import React from 'react';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport './App.css';\nimport Counter from './counter';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div>\n        <Counter />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n\n    window.location.hostname === '[::1]' ||\n    \n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n     \n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n    \n        checkValidServiceWorker(swUrl, config);\n\n        \n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        \n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              \n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n             \n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              \n              console.log('Content is cached for offline use.');\n\n              \n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      \n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n       \n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n       \n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}